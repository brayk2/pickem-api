name: 'Build'

on:
  # Run the workflow on push to specific branches
  push:
    branches:
      - master
      - development
      - feature/*   # Optional: Add specific branches or patterns

  # Run the workflow on pull requests targeting specific branches
  pull_request:
    branches:
      - master
      - development

env:
  AWS_BUCKET: "pickem-api"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Setup python'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 'Install Poetry'
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: 'Extract Version'
        id: extract_version
        run: |
          version=$(poetry version --short)
          echo "project_version=${version}" >> $GITHUB_ENV

      - name: 'Check if Release Exists'
        id: check_release_exists
        run: |
          release_file="${{ env.project_version }}-release.zip"
          if aws s3 ls s3://{{ env.AWS_BUCKET }}/$release_file; then
            echo "Error: Release ${release_file} already exists. Please bump the version before proceeding."
            exit 1
          else
            echo "No release found, proceeding with current version."
          fi

      - name: 'Determine Artifact Name and Tag'
        id: determine_artifact_name
        run: |
          branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

          if [[ "${branch_name}" == feature/* ]]; then
            branch_suffix=$(echo "${branch_name}" | sed 's|feature/||')
            echo "artifact_name=${{ env.project_version }}-${branch_suffix}-snapshot.zip" >> $GITHUB_ENV
            echo "artifact_tag=version=snapshot" >> $GITHUB_ENV
          elif [[ "${branch_name}" == development ]]; then
            timestamp=$(date +'%Y%m%d%H%M%S')
            echo "artifact_name=${{ env.project_version }}-rc-${timestamp}.zip" >> $GITHUB_ENV
            echo "artifact_tag=version=rc" >> $GITHUB_ENV
          elif [[ "${branch_name}" == master ]]; then
            echo "artifact_name=${{ env.project_version }}-release.zip" >> $GITHUB_ENV
            echo "artifact_tag=version=release" >> $GITHUB_ENV
          else
            echo "Invalid branch naming does not match feature/*, development, or master"
            exit 1
          fi

          # Save the S3 object name to a file
          echo "${{ env.artifact_name }}" > s3_object_name.txt

      - name: 'Upload Step Data as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: s3-object-name
          path: s3_object_name.txt

      - name: 'Create Package'
        id: create_package
        run: |
          poetry --version
          poetry run python --version
          poetry install --no-interaction --no-ansi
          poetry build
          poetry run pip install --upgrade --target package dist/*.whl
          cd package && zip -r ../${{ env.artifact_name }} . -x '*.pyc'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::881413588329:role/Pickem_Deployer
          aws-region: us-east-1

      - name: 'Upload to S3'
        run: aws s3 cp ${{ env.artifact_name }} s3://${{ env.AWS_BUCKET }}/

      - name: 'Add Tags to S3 Object'
        run: |
          aws s3api put-object-tagging --bucket ${{ env.AWS_BUCKET }} --key ${{ env.artifact_name }} \
            --tagging '{"TagSet":[{"Key":"version","Value":"${{ env.artifact_tag }}"}]}'


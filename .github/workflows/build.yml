name: 'Build'

on:
  push:
    branches:
      - main
      - feature/*

env:
  AWS_BUCKET: "pickem-api"
  AWS_LAMBDA: "pickem-api"

permissions:
  id-token: write
  contents: read

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Setup python'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 'Install Poetry'
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: 'Configure AWS credentials'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::881413588329:role/Pickem_Deployer
          aws-region: us-east-1

      - name: 'Extract Version'
        id: extract_version
        run: |
          version=$(poetry version --short)
          echo "project_version=${version}" >> $GITHUB_ENV

      - name: 'Check if Release Exists'
        id: check_release_exists
        run: |
          release_file="${{ env.project_version }}-release.zip"
          if aws s3 ls s3://${{ env.AWS_BUCKET }}/${release_file}; then
            echo "Error: Release ${release_file} already exists. Please bump the version before proceeding."
            exit 1
          else
            echo "No release found, proceeding with current version."
          fi

      - name: 'Determine Artifact Name and Tag'
        id: determine_artifact_name
        run: |
          # Check if this is a pull request event
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Use the head ref for pull request
            branch_name="${{ github.event.pull_request.head.ref }}"
          else
            # Use the normal ref for branch pushes
            branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')
          fi

          # Determine artifact name based on the branch
          if [[ "${branch_name}" == feature/* ]]; then
            branch_suffix=$(echo "${branch_name}" | sed 's|feature/||')
            artifact_name="${{ env.project_version }}-${branch_suffix}-snapshot.zip"
            artifact_tag="version=snapshot"
          elif [[ "${branch_name}" == main ]]; then
            artifact_name="${{ env.project_version }}-release.zip"
            artifact_tag="version=release"
          else
            echo "Invalid branch naming does not match feature/* or main"
            exit 1
          fi

          # Save the S3 object name to a file
          echo "${artifact_name}" > s3_object_name.txt
          cat s3_object_name.txt

          # Set environment variables for later steps
          echo "artifact_name=${artifact_name}" >> $GITHUB_ENV
          echo "artifact_tag=${artifact_tag}" >> $GITHUB_ENV
      

      - name: 'Upload Step Data as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: s3-object-name
          path: s3_object_name.txt

      - name: 'Create Package'
        id: create_package
        run: |
          poetry --version
          poetry run python --version
          poetry install --no-interaction --no-ansi
          poetry build
          poetry run pip install --upgrade --target package dist/*.whl
          cd package && zip -r ../${{ env.artifact_name }} . -x '*.pyc'

      - name: 'Upload to S3'
        run: aws s3 cp ${{ env.artifact_name }} s3://${{ env.AWS_BUCKET }}/

      - name: 'Add Tags to S3 Object'
        run: |
          aws s3api put-object-tagging --bucket ${{ env.AWS_BUCKET }} --key ${{ env.artifact_name }} \
            --tagging '{"TagSet":[{"Key":"version","Value":"${{ env.artifact_tag }}"}]}'
  Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: 'Download S3 Object Name Artifact'
        uses: actions/download-artifact@v4
        with:
          name: s3-object-name

      - name: 'Read S3 Object Name'
        id: read_s3_object_name
        run: |
          s3_object_name=$(cat s3_object_name.txt)
          echo "s3_object_name=${s3_object_name}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::881413588329:role/Pickem_Deployer
          aws-region: us-east-1

      - name: 'Update Lambda Function with S3 Object Name'
        run: |
          aws lambda update-function-code \
            --function-name=${{ env.AWS_LAMBDA }} \
            --s3-bucket=${{ env.AWS_BUCKET }} \
            --s3-key=${{ env.s3_object_name }} \
            --cli-read-timeout 60 \
            --cli-connect-timeout 60

    needs: Build
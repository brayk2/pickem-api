name: 'Build'

on:
  push:
    branches:
      - master
      - development
      - feature/*

  pull_request:
    branches:
      - master
      - development

env:
  AWS_BUCKET: "pickem-api"
  AWS_LAMBDA: "pickem-api"

permissions:
  id-token: write
  contents: read

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: 'Setup python'
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: 'Install Poetry'
        uses: snok/install-poetry@v1
        with:
          version: latest

      - name: 'Extract Version'
        id: extract_version
        run: |
          version=$(poetry version --short)
          echo "project_version=${version}" >> $GITHUB_ENV

      - name: 'Check if Release Exists'
        id: check_release_exists
        run: |
          release_file="${{ env.project_version }}-release.zip"
          if aws s3 ls s3://${{ env.AWS_BUCKET }}/$release_file; then
            echo "Error: Release ${release_file} already exists. Please bump the version before proceeding."
            exit 1
          else
            echo "No release found, proceeding with current version."
          fi

      - name: 'Determine Artifact Name and Tag'
        id: determine_artifact_name
        run: |
          branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||')

          if [[ "${branch_name}" == feature/* ]]; then
            branch_suffix=$(echo "${branch_name}" | sed 's|feature/||')
            artifact_name="${{ env.project_version }}-${branch_suffix}-snapshot.zip"
            artifact_tag="version=snapshot"
          elif [[ "${branch_name}" == development ]]; then
            timestamp=$(date +'%Y%m%d%H%M%S')
            artifact_name="${{ env.project_version }}-rc-${timestamp}.zip"
            artifact_tag="version=rc"
          elif [[ "${branch_name}" == master ]]; then
            artifact_name="${{ env.project_version }}-release.zip"
            artifact_tag="version=release"
          else
            echo "Invalid branch naming does not match feature/*, development, or master"
            exit 1
          fi

          # Save the S3 object name to a file
          echo "${artifact_name}" > s3_object_name.txt
          cat s3_object_name.txt

          # Set environment variables for later steps
          echo "artifact_name=${artifact_name}" >> $GITHUB_ENV
          echo "artifact_tag=${artifact_tag}" >> $GITHUB_ENV
      

      - name: 'Upload Step Data as Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: s3-object-name
          path: s3_object_name.txt
  Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: 'Download S3 Object Name Artifact'
        uses: actions/download-artifact@v4
        with:
          name: s3-object-name

      - name: 'Read S3 Object Name'
        id: read_s3_object_name
        run: |
          s3_object_name=$(cat s3_object_name.txt)
          echo "s3_object_name=${s3_object_name}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::881413588329:role/Pickem_Deployer
          aws-region: us-east-1

      - name: 'Update Lambda Function with S3 Object Name'
        run: |
          aws lambda update-function-code \
            --function-name=${{ env.AWS_LAMBDA }} \
            --s3-bucket=${{ env.AWS_BUCKET }} \
            --s3-key=${{ env.s3_object_name }} \
            --cli-read-timeout 60 \
            --cli-connect-timeout 60
